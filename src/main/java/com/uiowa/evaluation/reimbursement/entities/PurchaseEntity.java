package com.uiowa.evaluation.reimbursement.entities;

import java.time.LocalDateTime;

import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import org.springframework.util.ObjectUtils;
import org.springframework.web.multipart.MultipartFile;

import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Lob;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.Setter;

/**
 * Purchase entity class.
 * Note that the validation of the fields in this class 
 * are not as strict as that of PurchaseForm. I tried to
 * do only database-related validation in this class.
 */
@Entity
@EntityListeners(AuditingEntityListener.class)
@Getter
@Setter
public class PurchaseEntity extends AuditableEntity {
    public final static int MAX_DESCRIPTION_SIZE = 1024;
    public final static int VARCHAR_SIZE = 1024;

    // ID field, the value of which gets autogenerated.
    @Id
    @GeneratedValue
    private Long id;

    // Non-null date. Not specifying the format, since that is handled in form validation.
    @NotNull
    private LocalDateTime date;

    // Non-null, non-empty description needed.
    @NotEmpty
    @Size(max = MAX_DESCRIPTION_SIZE)
    private String description;

    // Because of time constraints, I'm assuming an integer is enough for
    // the purchase amount. Also assuming dollar amount instead of any 
    // other currency.
    @NotNull
    private Integer amount;

    // Because of time constraints, storing receipt files directly 
    // in the database instead of the filesystem. From a DB perspective,
    // doesn't matter what the type of the file is, which is why 
    // there is no validation for that here. But in the form 
    // submission code (PurchaseForm) there is validation for file type,
    // which makes sense in that context.
    @Lob
    private byte[] receipt;

    // Just storing some additional info about the receipt file.
    @Size(max = VARCHAR_SIZE)
    private String receiptOriginalFilename;

    @Size(max = VARCHAR_SIZE)
    private String receiptContentType;

    /** 
     * Just a convenience method for development purposes. 
     */
    @Override
    public String toString() {
        String[] values = new String[] {
            date.toString(), 
            description,
            amount.toString(),
            receiptOriginalFilename
        };

        return String.join(System.lineSeparator(), values);
    }
}
